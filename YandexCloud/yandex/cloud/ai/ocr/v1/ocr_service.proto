syntax = "proto3";

package yandex.cloud.ai.ocr.v1;

import "yandex/cloud/ai/ocr/v1/ocr.proto";
import "google/api/annotations.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/ai/ocr/v1;ocr";
option java_package = "yandex.cloud.api.ai.ocr.v1";


message RecognizeTextRequest {
    oneof source {
        //bytes with data
        bytes content = 1;
    }
    // [MIME type](https://en.wikipedia.org/wiki/Media_type) of content (for example, `` application/pdf ``).
    string mime_type = 2;
    // List of the languages to recognize text.
    // Specified in [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format (for example, `` ru ``).
    repeated string language_codes = 3;
    // Model to use for text detection.
    string model = 4 [(length) = "<=50"];
}

message RecognizeTextResponse {
    // Recognized text blocks in this page or text from entities.
    TextAnnotation text_annotation = 1;
    // Page number in PDF file.
    int64 page = 2;
}

service TextRecognitionService {
    rpc Recognize (RecognizeTextRequest) returns (stream RecognizeTextResponse) {
        option (google.api.http) = { post: "/ocr/v1/recognizeText" body: "*" };
    }
}

message GetRecognitionRequest {
    // Operation ID of async recognition request.
    string operation_id = 1 [(required) = true, (length) = "<=50"];
}

service TextRecognitionAsyncService {
    rpc Recognize (RecognizeTextRequest) returns  (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            response: "google.protobuf.Empty"
        };
        option (google.api.http) = { post: "/ocr/v1/recognizeTextAsync" body: "*" };
    }
    rpc GetRecognition(GetRecognitionRequest) returns (stream RecognizeTextResponse) {
        option (google.api.http) = { get: "/ocr/v1/getRecognition"};
    }
}

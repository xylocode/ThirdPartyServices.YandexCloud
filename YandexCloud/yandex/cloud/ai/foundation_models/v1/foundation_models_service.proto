syntax = "proto3";

package yandex.cloud.ai.foundation_models.v1;

import "google/api/annotations.proto";
import "yandex/cloud/ai/foundation_models/v1/foundation_models.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/ai/foundation_models/v1;foundation_models";
option java_package = "yandex.cloud.api.ai.foundation_models.v1";

// Request for the service to generate text completion.
message CompletionRequest {
  // The identifier of the model to be used for completion generation.
  string model_uri = 1;

  // Configuration options for completion generation.
  CompletionOptions completion_options = 2;

  // A list of messages representing the context for the completion model.
  repeated Message messages = 3;
}

// Response containing generated text completions
message CompletionResponse {
  // A list of generated completion alternatives.
  repeated Alternative alternatives = 1;

  // A set of statistics describing the number of content tokens used by the completion model.
  ContentUsage usage = 2;

  // Model version (changes with model releases).
  string model_version = 3;
}

// Service for text generation.
service TextGenerationService {
  // RPC method for generating text completions.
  rpc Completion (CompletionRequest) returns (stream CompletionResponse) {
    option (google.api.http) = {post: "/foundationModels/v1/completion" body: "*"};
  }
}

// Service for asynchronous text generation.
service TextGenerationAsyncService {
  // RPC method for generating text completions in asynchronous mode.
  rpc Completion (CompletionRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      response: "CompletionResponse"
    };
    option (google.api.http) = {post: "/foundationModels/v1/completionAsync" body: "*"};
  }
}

// Request for the service to tokenize input text.
message TokenizeRequest {
  // The identifier of the model to be used for tokenization.
  string model_uri = 1;
  // Text to be tokenized.
  string text = 2;
}

// Response containing tokenized content from request.
message TokenizeResponse {
  // A list of tokens obtained from tokenization.
  repeated Token tokens = 1;

  // Model version (changes with model releases).
  string model_version = 2;
}

// Service for tokenizing input content.
service TokenizerService {
  // RPC method for tokenizing text.
  rpc Tokenize (TokenizeRequest) returns (TokenizeResponse) {
    option (google.api.http) = {post: "/foundationModels/v1/tokenize" body: "*"};
  }

  // RPC method for tokenizing content of CompletionRequest
  rpc TokenizeCompletion (CompletionRequest) returns (TokenizeResponse) {
    option (google.api.http) = {post: "/foundationModels/v1/tokenizeCompletion" body: "*"};
  }
}

// Request for the service to obtain text embeddings.
message TextEmbeddingRequest {
  // The identifier of the model to be used for obtaining text embeddings.
  string model_uri = 1;

  // The input text for which the embedding is requested.
  string text = 2;
}

// Response containing generated text embedding.
message TextEmbeddingResponse {
  // A repeated list of double values representing the embedding.
  repeated double embedding = 1;

  // The number of tokens in the input text.
  int64 num_tokens = 2;

  // Model version (changes with model releases).
  string model_version = 3;
}

// Service for obtaining embeddings from input data.
service EmbeddingsService {
  // RPC method for obtaining embeddings from text data.
  rpc TextEmbedding (TextEmbeddingRequest) returns (TextEmbeddingResponse) {
    option (google.api.http) = {post: "/foundationModels/v1/textEmbedding" body: "*"};
  }
}

syntax = "proto3";

package yandex.cloud.datasphere.v2.jobs;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/datasphere/v2/jobs/jobs.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/datasphere/v2/jobs;datasphere";
option java_outer_classname = "DSPJS";
option java_package = "yandex.cloud.api.datasphere.v2.jobs";

// A set of methods for managing Project Jobs.
service ProjectJobService {
  // Creates job.
  rpc Create (CreateProjectJobRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "CreateProjectJobMetadata"
      response: "CreateProjectJobResponse"
    };
  }
  // Runs job execution.
  rpc Execute (ExecuteProjectJobRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "ExecuteProjectJobMetadata"
      response: "ExecuteProjectJobResponse"
    };
  }

  // Cancels running job.
  rpc Cancel (CancelProjectJobRequest) returns (google.protobuf.Empty);

  // Triggers cleanup after downloading job results.
  rpc Finalize (FinalizeProjectJobRequest) returns (FinalizeProjectJobResponse);

  // Returns stream of job logs.
  rpc ReadStdLogs (ReadProjectJobStdLogsRequest) returns (stream ReadProjectJobStdLogsResponse) {
    option deprecated = true;
  };

  // Returns stream of job logs.
  rpc ReadLogs (ReadProjectJobLogsRequest) returns (stream ReadProjectJobLogsResponse);

  // Lists jobs.
  rpc List (ListProjectJobRequest) returns (ListProjectJobResponse);

  // Returns job by id.
  rpc Get (GetProjectJobRequest) returns (Job);

  // Deletes specified job.
  rpc Delete (DeleteProjectJobRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteProjectJobMetadata"
      response: "google.protobuf.Empty"
    };
  }
}

message CreateProjectJobRequest {
  // ID of the project.
  string project_id = 1;

  // Parameters of the job.
  JobParameters job_parameters = 2;

  // Config of the job.
  string config = 3;

  // Name of the job.
  string name = 4;

  // Description of the job.
  string desc = 5;
}

message CreateProjectJobMetadata {
  // ID of the project.
  string project_id = 1;
}

message CreateProjectJobResponse {
  // ID of the job.
  string job_id = 1;

  // Files to upload with their presigned URLs for upload.
  repeated StorageFile upload_files = 2;
}

message ExecuteProjectJobRequest {
  // ID of the job.
  string job_id = 1;
}

message ExecuteProjectJobResponse {
  // Uploaded output files with URLs.
  repeated StorageFile output_files = 1;

  // Result of the job.
  JobResult result = 2;
}

message ExecuteProjectJobMetadata {
  // Instance of the job.
  Job job = 1;
}

message CancelProjectJobRequest {
  // ID of the job.
  string job_id = 1;

  // Optional cancellation reason.
  string reason = 2;
}

message FinalizeProjectJobRequest {
  // ID of the job.
  string job_id = 1;
}

message FinalizeProjectJobResponse {
  // ID of the job.
  string job_id = 1;
}

message ReadProjectJobStdLogsRequest {
  // ID of the job.
  string job_id = 1;

  // Log offset.
  int64 offset = 2;
}

message ReadProjectJobStdLogsResponse {
  repeated StdLog logs = 1;

  // Log offset.
  int64 offset = 2;
}

message ReadProjectJobLogsRequest {
  // ID of the job.
  string job_id = 1;

  // Log offset.
  int64 offset = 2;
}

message ReadProjectJobLogsResponse {
  repeated LogMessage logs = 1;

  // Log offset.
  int64 offset = 2;
}

message ListProjectJobRequest {
  // ID of the project.
  string project_id = 1;

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size],
  // the service returns a [ListProjectJobResponse.page_token]
  // that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 2;

  // Page token. To get the next page of results, set [page_token] to the
  // [ListProjectJobResponse.page_token] returned by a previous list request.
  string page_token = 3;
}

message ListProjectJobResponse {
  // Instances of the jobs.
  repeated Job jobs = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListProjectJobRequest.page_size], use
  // the [next_page_token] as the value
  // for the [ListProjectJobRequest.page_token] query parameter
  // in the next list request. Each subsequent list request will have its own
  // [page_token] to continue paging through the results.
  string page_token = 2;
}

message GetProjectJobRequest {
  // ID of the job.
  string job_id = 1;
}

message DeleteProjectJobRequest {
  // ID of the job.
  string job_id = 1;
}

message DeleteProjectJobMetadata {
  // ID of the job.
  string job_id = 1;
}

message StdLog {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    // stdout.
    OUT = 1;
    // stderr.
    ERR = 2;
  }

  // Log contents.
  bytes content = 1;

  // Log type.
  Type type = 2;
}

enum StandardStream {
  STANDARD_STREAM_UNSPECIFIED = 0;
  // Stdout.
  OUT = 1;
  // Stderr.
  ERR = 2;
}

message LogMessage {
  // Log message contents.
  bytes content = 1;
  // Log message creation timestamp.
  google.protobuf.Timestamp created_at = 2;

  oneof source {
    // Program standard streams.
    StandardStream standard_stream = 3;
    // System debug log files.
    string file_path = 4;
  }
}

syntax = "proto3";

package yandex.cloud.marketplace.licensemanager.v1;

import "google/api/annotations.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/marketplace/licensemanager/v1/lock.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/marketplace/licensemanager/v1;licensemanager";
option java_package = "yandex.cloud.api.marketplace.licensemanager.v1";

// A set of methods for managing subscription locks.
service LockService {
    // Returns the specified subscription lock.
    rpc Get(GetLockRequest) returns (Lock) {
        option (google.api.http) = { get: "/marketplace/license-manager/v1/locks/{lock_id}" };
    }

    // Returns the subscription lock for specified subscription instance and resource.
    rpc GetByInstanceAndResource(GetLockByInstanceAndResourceRequest) returns (Lock) {
        option (google.api.http) = { get: "/marketplace/license-manager/v1/locks:getByInstanceAndResource" };
    }

    // Locks the specified subscription instance to the resource.
    rpc Create(CreateLockRequest) returns (operation.Operation) {
        option (google.api.http) = { post: "/marketplace/license-manager/v1/locks" body: "*" };
        option (yandex.cloud.api.operation) = {
            metadata: "CreateLockMetadata"
            response: "Lock"
        };
    }

    // Checks if the she specified subscription is already locked to the specified resource.
    // If it is not locked, locks the subscription to the resource.
    rpc Ensure(EnsureLockRequest) returns (operation.Operation) {
        option (google.api.http) = { post: "/marketplace/license-manager/v1/locks/{instance_id}:ensure" body: "*" };
        option (yandex.cloud.api.operation) = {
            metadata: "EnsureLockMetadata"
            response: "Lock"
        };
    }

    // Unlocks the specified subscription lock.
    rpc Delete(DeleteLockRequest) returns (operation.Operation) {
        option (google.api.http) = { delete: "/marketplace/license-manager/v1/locks/{lock_id}" };
        option (yandex.cloud.api.operation) = {
            metadata: "DeleteLockMetadata"
            response: "google.protobuf.Empty"
        };
    }
}

message GetLockRequest {
    // ID of the subscription lock.
    string lock_id = 1 [(required) = true];
}

message CreateLockRequest {
    // ID of the subscription instance.
    string instance_id = 1 [(required) = true];
    // ID of the resource to which the subscription will be locked.
    string resource_id = 2 [(required) = true];
}

message EnsureLockRequest {
    // ID of the subscription instance.
    string instance_id = 1 [(required) = true];
    // ID of the resource to which the subscription will be locked.
    string resource_id = 2 [(required) = true];
}

message CreateLockMetadata {
    // ID of the subscription lock.
    string lock_id = 1;
}

message EnsureLockMetadata {
    // ID of the subscription lock.
    string lock_id = 1;
}

message DeleteLockRequest {
    // ID of the subscription lock.
    string lock_id = 1 [(required) = true];
}

message DeleteLockMetadata {
    // ID of the subscription lock.
    string lock_id = 1;
}

message GetLockByInstanceAndResourceRequest {
    // ID of the subscription instance.
    string instance_id = 1 [(required) = true];
    // ID of the resource to which the subscription will be locked.
    string resource_id = 2 [(required) = true];
}
